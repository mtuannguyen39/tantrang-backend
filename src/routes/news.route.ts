import express from "express";
import { Request, Response } from "express";
import multer from "multer";
import path from "path";
import fs from "fs";
import sharp from "sharp";
import {
  getNews,
  createNews,
  deleteNews,
  getNewsDetail,
  updateNews,
} from "../controllers/news.controller";

const router = express.Router();

// D√πng memoryStorage v√¨ c·∫ßn buffer ·∫£nh cho sharp
const storage = multer.memoryStorage();
const upload = multer({ storage });

// POST /api/news/upload
router.post("/upload", upload.single("file"), async (req, res) => {
  try {
    const file = req.file;
    if (!file) {
      res.status(400).json({ error: "Kh√¥ng c√≥ file n√†o ƒë∆∞·ª£c upload" });
      return;
    }

    const filename = `${Date.now()}.jpeg`;
    const outputPath = path.join(__dirname, "../../uploads", filename);

    // ƒê·∫£m b·∫£o th∆∞ m·ª•c t·ªìn t·∫°i
    const uploadDir = path.join(__dirname, "../../uploads");
    if (!fs.existsSync(uploadDir)) {
      fs.mkdirSync(uploadDir, { recursive: true });
    }

    // N√©n v√† resize ·∫£nh
    await sharp(file.buffer)
      .resize(800) // resize width 800px, height auto
      .jpeg({ quality: 70 }) // n√©n ·∫£nh
      .toFile(outputPath);

    // Tr·∫£ v·ªÅ URL ch√≠nh x√°c
    const filePath = `/uploads/${filename}`;
    res.json({ url: filePath });
  } catch (err) {
    console.error("üî• Sharp processing failed:", err);
    res.status(500).json({ error: "Image processing failed" });
  }
});

// X√≥a h√¨nh ·∫£nh khi b·∫•m n√∫t delete tr√™n frontend
// router.delete("/delete-image", async (req, res) => {
//   try {
//     const { imageUrl } = req.body;

//     if (!imageUrl) {
//       res.status(400).json({ error: "Kh√¥ng c√≥ URL ·∫£nh ƒë·ªÉ x√≥a!" });
//       return;
//     }

//     // L·∫•y t√™n file t·ª´ URL (b·ªè /uploads/ ·ªü ƒë·∫ßu)
//     const filename = imageUrl.replace("/uploads/", "");

//     // T·∫°o ƒë∆∞·ªùng d·∫´n ƒë·∫ßy ƒë·ªß t·ªõi file
//     const filePath = path.join(__dirname, "../../uploads", filename);

//     //Ki·ªÉm tra file c√≥ t·ªìn t·∫°i kh√¥ng
//     if (!fs.existsSync(filePath)) {
//       res.status(404).json({ error: "File ·∫£nh kh√¥ng t·ªìn t·∫°i!" });
//       return;
//     }

//     // X√≥a file
//     fs.unlinkSync(filePath);

//     res.json({
//       success: true,
//       message: "ƒê√£ x√≥a ·∫£nh th√†nh c√¥ng!",
//       deletedFile: filename,
//     });
//   } catch (err) {
//     console.error("üî• Deleted image failed: ", err);
//     res.status(500).json({ error: "X√≥a ·∫£nh th·∫•t b·∫°i!!!" });
//   }
// });

// DELETE /api/news/delete-image
const deleteImageHandler = (req: Request, res: Response): void => {
  const { imageUrl } = req.body;

  if (!imageUrl) {
    res.status(400).json({ error: "URL ·∫£nh kh√¥ng ƒë∆∞·ª£c cung c·∫•p" });
    return;
  }

  // Tr√≠ch xu·∫•t t√™n file t·ª´ URL
  const filename = path.basename(imageUrl);
  const filePathToDelete = path.join(__dirname, "../../uploads", filename);

  // Ki·ªÉm tra xem file c√≥ t·ªìn t·∫°i v√† n·∫±m trong th∆∞ m·ª•c 'uploads' kh√¥ng ƒë·ªÉ tƒÉng cao h·ªá th·ªëng b·∫£o m·∫≠t
  if (!filePathToDelete.startsWith(path.join(__dirname, "../../uploads"))) {
    res
      .status(403)
      .json({ error: "Truy c·∫≠p b·ªã t·ª´ ch·ªëi: ƒê∆∞·ªùng d·∫´n file kh√¥ng h·ª£p l·ªá." });
    return;
  }

  fs.unlink(filePathToDelete, (err) => {
    if (err) {
      if (err.code === "ENOENT") {
        console.warn(
          `Attempted to delete non-existent file: ${filePathToDelete}`
        );
        res.status(404).json({ error: "File kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ b·ªã x√≥a." });
        return;
      }
      console.error(`Error deleting file: ${filePathToDelete}:`, err);
      res.status(500).json({ error: "Kh√¥ng th·ªÉ x√≥a file." });
      return;
    }

    res
      .status(200)
      .json({ message: `File ${filename} ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng.` });
  });
};

router.delete("/delete-image", deleteImageHandler);

router.get("/", getNews);
router.get("/:id", getNewsDetail);
router.post("/", createNews);
router.delete("/:id", deleteNews);
router.put("/:id", updateNews);

export default router;
