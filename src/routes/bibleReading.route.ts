import express from "express";
import { Request, Response } from "express";
import multer from "multer";
import sharp from "sharp";
import { supabase } from "../config/supabase";
import { v4 as uuidv4 } from "uuid";
import {
  createReading,
  deleteReading,
  getReadingDetail,
  getReadings,
  updateReading,
} from "../controllers/bibleReading.controller";

const router = express.Router();

// D√πng memoryStorage ƒë·ªÉ nh·∫≠n buffer c·ªßa file, r·∫•t t·ªët cho Sharp
const storage = multer.memoryStorage();
// C·∫•u h√¨nh Multer v·ªõi gi·ªõi h·∫°n k√≠ch th∆∞·ªõc file
// V√≠ d·ª•: gi·ªõi h·∫°n 25mb. ƒêi·ªÅu n√†y gi√∫p ngƒÉn ch·∫∑n c√°c file qu√° l·ªõn g√¢y l·ªói cho Sharp
const upload = multer({
  storage,
  limits: {
    fileSize: 25 * 1024 * 1024, //25mb
    files: 1, // Ch·ªâ cho ph√©p 1 files
  },
  fileFilter: (req, file, cb) => {
    // Ch·ªâ ch·∫•p nh·∫≠n c√°c lo·∫°i file ·∫£nh ph·ªï bi·∫øn
    if (file.mimetype.startsWith("image/")) {
      cb(null, true);
    } else cb(null, false);
  },
});

// POST /api/bible-reading/upload
router.post(
  "/uploadBible",
  // S·ª≠ d·ª•ng m·ªôt middleware x·ª≠ l√Ω l·ªói t√πy ch·ªânh cho Multer
  (req, res, next) => {
    upload.single("file")(req, res, (err: any) => {
      if (err instanceof multer.MulterError) {
        // L·ªói t·ª´ Multer (v√≠ d·ª•: FILE_TOO_LARGE)
        return res
          .status(400)
          .json({ error: `Upload th·∫•t b·∫°i: ${err.message}` });
      } else if (err) {
        // L·ªói kh√°c (v√≠ d·ª•: t·ª´ FileFilter)
        return res
          .status(400)
          .json({ error: `Upload th·∫•t b·∫°i: ${err.message}` });
      }
      next(); // Chuy·ªÉn sang middleware ti·∫øp theo n·∫øu kh√¥ng c√≥ l·ªói
    });
  },
  async (req, res): Promise<void> => {
    try {
      const file = req.file;

      if (!file) {
        res.status(400).json({ error: "Kh√¥ng c√≥ file n√†o ƒë∆∞·ª£c upload." });
        return;
      }

      // Log file nh·∫≠n ƒë∆∞·ª£c
      console.log("K√≠ch th∆∞·ªõc file nh·∫≠n ƒë∆∞·ª£c:", file.size, "bytes");
      console.log("Lo·∫°i MIME c·ªßa file:", file.mimetype);

      // T·∫°o t√™n tile duy nh·∫•t v·ªõi ph·∫ßn m·ªü r·ªông .jpeg
      const uniqueFileName = `${uuidv4()}.jpeg`;

      // N√©n v√† resize ·∫£nh
      // Ki·ªÉm tra xem file.bufer c√≥ d·ªØ li·ªáu kh√¥ng tr∆∞·ªõc khi  truy·ªÅn cho Sharp
      if (!file.buffer || file.buffer.length === 0) {
        res.status(400).json({ error: "D·ªØ li·ªáu ·∫£nh kh√¥ng h·ª£p l·ªá ho·∫∑c tr·ªëng." });
        return;
      }
      const resizedBuffer = await sharp(file.buffer)
        .resize(800)
        .jpeg({ quality: 80 })
        .toBuffer();

      // Uoload file l√™n Supabase Storage
      const { data, error: uploadError } = await supabase.storage
        .from("bibleupload")
        .upload(uniqueFileName, resizedBuffer, {
          contentType: "image/jpeg",
          upsert: false,
        });

      if (uploadError) {
        console.log("üî• Supabase upload failed:", uploadError);
        res.status(500).json({
          error: "Upload ·∫£nh l√™n Supabase th·∫•t b·∫°i",
          details: uploadError.message,
        });
        return;
      }

      // L·∫•y URL c√¥ng khai. getPublicUrl kh√¥ng tr·∫£ v·ªÅ l·ªói
      const { data: publicUrlData } = supabase.storage
        .from("bibleupload")
        .getPublicUrl(uniqueFileName);

      const publicUrl = publicUrlData.publicUrl;

      res.json({ url: publicUrl });
    } catch (err) {
      // b·∫Øt l·ªói t·ªïng qu√°t t·ª´ Sharp ho·∫∑c c√°c thao t√°c kh√°c
      console.error("üî• L·ªói x·ª≠ l√Ω ho·∫∑c upload ·∫£nh:", err);
      res.status(500).json({
        error: "L·ªói x·ª≠ l√Ω ho·∫∑c upload ·∫£nh",
        details: err instanceof Error ? err.message : "L·ªói kh√¥ng x√°c ƒë·ªãnh",
      });
    }
  }
);

const deleteImageHandler = async (req: Request, res: Response) => {
  const { imageUrl } = req.body;

  if (!imageUrl) {
    return res.status(400).json({ error: "URL ·∫£nh kh√¥ng ƒë∆∞·ª£c cung c·∫•p." });
  }

  try {
    const urlParts = imageUrl.split("/");
    const publicIndex = urlParts.indexOf("public");

    if (publicIndex === -1 || publicIndex + 1 >= urlParts.length) {
      return res.status(400).json({
        error: "ƒê·ªãnh d·∫°ng URL ·∫£nh kh√¥ng h·ª£p l·ªá cho Supabase Storage.",
      });
    }

    const bucketName = urlParts[publicIndex + 1]; // V√≠ d·ª•: "bibleupload"
    const fileNameInBucket = urlParts.slice(publicIndex + 2).join("/"); // Ph·∫ßn c√≤n l·∫°i l√† t√™n file, bao g·ªìm c·∫£ sub-folder n·∫øu c√≥

    if (!bucketName || !fileNameInBucket) {
      return res.status(400).json({
        error: "Kh√¥ng th·ªÉ tr√≠ch xu·∫•t t√™n bucket ho·∫∑c teenfile t·ª´ URL.",
      });
    }

    const { error: deleteError } = await supabase.storage
      .from(bucketName)
      .remove([fileNameInBucket]);

    if (deleteError) {
      console.error("üî• Supabase delete failed:", deleteError);
      if (deleteError.message.includes("not found")) {
        return res.status(404).json({
          error: `File ·∫£nh kh√¥ng t·ªìn t·∫°i tr√™n Supabase Storage: ${fileNameInBucket}`,
        });
      }
      return res.status(500).json({
        error: "L·ªói khi x√≥a file ·∫£nh tr√™n Supabase Storage",
        details: deleteError.message,
      });
    }
    res.status(200).json({
      message: ` ·∫¢nh ${fileNameInBucket} ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng t·ª´ Supabase Storage.`,
    });
  } catch (err) {
    console.error("üî• L·ªói trong qu√° tr√¨nh x√≥a ·∫£nh t·ª´ Supabase Storage:", err);
    res.status(500).json({
      error: "L·ªói n·ªôi b·ªô khi x√≥a ·∫£nh t·ª´ Supabase Storage.",
      details: (err as Error).message,
    });
  }
};

router.delete("/delete-image", (req, res, next) => {
  deleteImageHandler(req, res).catch(next);
});

router.get("/", getReadings);
router.get("/:id", getReadingDetail);
router.post("/", createReading);
router.delete("/:id", deleteReading);
router.put("/:id", updateReading);

export default router;
