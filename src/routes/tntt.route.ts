import express from "express";
import { Request, Response } from "express";
import {
  createTntt,
  deleteTntt,
  getTntt,
  getTnttDetail,
  updateTntt,
} from "../controllers/tntt.controller";
import multer from "multer";
import path from "path";
import fs from "fs";
import sharp from "sharp";

const router = express.Router();

// D√πng memoryStorage v√¨ c·∫ßn buffer ·∫£nh cho sharp
const storage = multer.memoryStorage();
const upload = multer({ storage });

// POST /api/tntt/uploadTntt
router.post("/upload", upload.single("file"), async (req, res) => {
  try {
    const file = req.file;
    if (!file) {
      res.status(400).json({ error: "Kh√¥ng c√≥ file n√†o ƒë∆∞·ª£c upload" });
      return;
    }

    const filename = `${Date.now()}.jpeg`;
    const outputPath = path.join(__dirname, "../../uploadTntt", filename);

    // ƒê·∫£m b·∫£o th∆∞ m·ª•c t·ªìn t·∫°i
    const uploadDir = path.join(__dirname, "../../uploadTntt");
    if (!fs.existsSync(uploadDir)) {
      fs.mkdirSync(uploadDir, { recursive: true });
    }

    // N√©n v√† resize ·∫£nh
    await sharp(file.buffer)
      .resize(800) // Resize width 800px, height auto
      .jpeg({ quality: 70 }) // N√©n ·∫£nh
      .toFile(outputPath);

    // Tr·∫£ v·ªÅ URL ch√≠nh x√°c
    const filePath = `/uploadTntt/${filename}`;
    res.json({ url: filePath });
  } catch (err) {
    console.error("üî• Sharp processing failed:", err);
    res.status(500).json({ error: "Image processing failed" });
  }
});

// DELETE /api/news/delete-image
const deleteImageHandler = (req: Request, res: Response): void => {
  const { imageUrl } = req.body;

  if (!imageUrl) {
    res.status(400).json({ error: "URL ·∫£nh kh√¥ng ƒë∆∞·ª£c cung c·∫•p" });
    return;
  }

  // Tr√≠ch xu·∫•t t√™n file t·ª´ URL
  const filename = path.basename(imageUrl);
  const filePathToDelete = path.join(__dirname, "../../uploadTntt", filename);

  // Ki·ªÉm tra xem file c√≥ t·ªìn t·∫°i v√† n·∫±m trong th∆∞ m·ª•c 'uploads' kh√¥ng ƒë·ªÉ tƒÉng cao h·ªá th·ªëng b·∫£o m·∫≠t
  if (!filePathToDelete.startsWith(path.join(__dirname, "../../uploadTntt"))) {
    res
      .status(403)
      .json({ error: "Truy c·∫≠p b·ªã t·ª´ ch·ªëi: ƒê∆∞·ªùng d·∫´n file kh√¥ng h·ª£p l·ªá." });
    return;
  }

  fs.unlink(filePathToDelete, (err) => {
    if (err) {
      if (err.code === "ENOENT") {
        console.warn(
          `Attempted to delete non-existent file: ${filePathToDelete}`
        );
        res.status(404).json({ error: "File kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ b·ªã x√≥a." });
        return;
      }
      console.error(`Error deleting file: ${filePathToDelete}:`, err);
      res.status(500).json({ error: "Kh√¥ng th·ªÉ x√≥a file." });
      return;
    }

    res
      .status(200)
      .json({ message: `File ${filename} ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng.` });
  });
};

router.delete("/delete-image", deleteImageHandler);

router.get("/", getTntt);
router.get("/:id", getTnttDetail);
router.post("/", createTntt);
router.put("/:id", updateTntt);
router.delete("/:id", deleteTntt);

export default router;
